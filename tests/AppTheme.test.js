import { createTestingPinia } from '@pinia/testing';
import { mount } from '@vue/test-utils';
import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';
import App from '../src/App.vue';

describe('App.vue theme (dark/light) logic', () => {
  let originalMatchMedia;
  let setItemSpy, getItemSpy;
  beforeEach(() => {
    originalMatchMedia = window.matchMedia;
    setItemSpy = vi.spyOn(window.localStorage.__proto__, 'setItem');
    getItemSpy = vi.spyOn(window.localStorage.__proto__, 'getItem');
    localStorage.clear();
    document.body.classList.remove('dark');
  });
  afterEach(() => {
    window.matchMedia = originalMatchMedia;
    setItemSpy.mockRestore();
    getItemSpy.mockRestore();
    document.body.classList.remove('dark');
  });

  it('switches theme on button click', async () => {
    const wrapper = mount(App, { global: { plugins: [createTestingPinia({ stubActions: false })] } });
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
    expect(wrapper.vm.isDark).toBe(false);
    expect(document.body.classList.contains('dark')).toBe(false);
    // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
    await wrapper.find('.theme-toggle').trigger('click');
    expect(wrapper.vm.isDark).toBe(true);
    expect(document.body.classList.contains('dark')).toBe(true);
    // –ö–ª–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ
    await wrapper.find('.theme-toggle').trigger('click');
    expect(wrapper.vm.isDark).toBe(false);
    expect(document.body.classList.contains('dark')).toBe(false);
  });

  it('initializes dark theme from localStorage', () => {
    localStorage.setItem('theme', 'dark');
    const wrapper = mount(App, { global: { plugins: [createTestingPinia({ stubActions: false })] } });
    expect(wrapper.vm.isDark).toBe(true);
    expect(document.body.classList.contains('dark')).toBe(true);
  });

  it('initializes light theme from localStorage', () => {
    localStorage.setItem('theme', 'light');
    const wrapper = mount(App, { global: { plugins: [createTestingPinia({ stubActions: false })] } });
    expect(wrapper.vm.isDark).toBe(false);
    expect(document.body.classList.contains('dark')).toBe(false);
  });

  it('initializes dark theme from system if no localStorage', () => {
    localStorage.removeItem('theme');
    window.matchMedia = vi.fn().mockImplementation(query => ({ matches: query.includes('dark') }));
    const wrapper = mount(App, { global: { plugins: [createTestingPinia({ stubActions: false })] } });
    expect(wrapper.vm.isDark).toBe(true);
    expect(document.body.classList.contains('dark')).toBe(true);
  });

  it('saves theme to localStorage when toggled', async () => {
    const wrapper = mount(App, { global: { plugins: [createTestingPinia({ stubActions: false })] } });
    await wrapper.find('.theme-toggle').trigger('click');
    expect(localStorage.getItem('theme')).toBe('dark');
    await wrapper.find('.theme-toggle').trigger('click');
    expect(localStorage.getItem('theme')).toBe('light');
  });

  it('sets correct aria-label and icon', async () => {
    const wrapper = mount(App, { global: { plugins: [createTestingPinia({ stubActions: false })] } });
    // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    expect(wrapper.find('.theme-toggle').attributes('aria-label')).toMatch(/–¢—ë–º–Ω–∞—è —Ç–µ–º–∞/);
    expect(wrapper.find('.theme-icon').text()).toBe('üåô');
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ç—ë–º–Ω—É—é
    await wrapper.find('.theme-toggle').trigger('click');
    expect(wrapper.find('.theme-toggle').attributes('aria-label')).toMatch(/–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞/);
    expect(wrapper.find('.theme-icon').text()).toBe('üåû');
  });
});
